#include<bits/stdc++.h>
using namespace std;

int max(int a,int b)
{
    if(a>b)
        return a;
    else
        return b;
}

int KnapSackRec(int w, int wt[], int val[], int i,vector <vector<int>> &dp)
{
    if(i<0)
    {
        return 0;
    }
    if (dp[i][w] != -1)
    {
        return dp[i][w];
    }
    if(wt[i]>w)
    {
        dp[i][w] = KnapSackRec(w, wt, val, i-1, dp);
        return dp[i][w];
    }
    else
    {
        dp[i][w] = max(val[i]+KnapSackRec(w-wt[i],wt,val,i-1,dp),KnapSackRec(w,wt,val,i-1,dp));
        return dp[i][w];
    }
}

int main()
{
    int val[] = {2,3,1,4};
    int wt[] = {3,4,6,5};
    int w = 8;
    int n = sizeof(val)/sizeof(val[0]);
    vector <vector<int>> dp(n+2,vector<int>(w+2,-1));
    for(int i=0; i<w+1; i++)
    {
        dp[0][i]=0;
    }
    for(int i=0; i<n+1; i++)
    {
        dp[i][0]=0;
    }
    
    cout<<KnapSackRec(w,wt,val,n,dp);
    return 0;
}
